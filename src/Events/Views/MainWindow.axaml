<Window xmlns="https://github.com/avaloniaui"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:vm="using:Events.ViewModels"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:models="clr-namespace:Events.Models"
        mc:Ignorable="d" d:DesignWidth="800" d:DesignHeight="450"
        x:Class="Events.Views.MainWindow"
        x:DataType="vm:MainWindowViewModel"
        Icon="/Assets/avalonia-logo.ico"
        WindowStartupLocation="CenterScreen"
        Title="Events">

    <DockPanel>
        <Menu DockPanel.Dock="Top">
            <MenuItem Header="File">
                <MenuItem 
                    Header="New" 
                    Command="{Binding NewListCommand}" />
                <MenuItem 
                    Header="Open" 
                    Command="{Binding OpenFileCommand}" />
                <MenuItem 
                    Header="Save all events from list" 
                    Command="{Binding SaveAllEventsCommand}" />
                <MenuItem 
                    Header="Save filtered events" 
                    Command="{Binding SaveFilteredEventsCommand}" />
            </MenuItem>
        </Menu>

        <TabControl Margin="1">
            <TabItem Header="Main">
                <ScrollViewer VerticalScrollBarVisibility="Auto">
                    <SplitView
                        IsPaneOpen="True"
                        DisplayMode="CompactInline"
                        OpenPaneLength="330">
                        <SplitView.Pane>
                            <StackPanel DockPanel.Dock="Left" Width="300">

                                <StackPanel>
                                    <TextBlock>Name:</TextBlock>
                                    <TextBox Text="{Binding NameFilter, Mode=TwoWay}" />
                                    <TextBlock>From: </TextBlock>
                                    <DatePicker x:Name="FromDatePicker"
                                                SelectedDate="{Binding DateToFilterFrom, Mode=TwoWay} "
                                                HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                                    </DatePicker>
                                    <TextBlock>To: </TextBlock>
                                    <DatePicker x:Name="ToDatePicker"
                                                SelectedDate="{Binding DateToFilterTo, Mode=TwoWay}"
                                                HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                                    </DatePicker>
                                    <TextBlock>Time:</TextBlock>
                                    <TimePicker SelectedTime="{Binding TimeFilter, Mode=TwoWay}" />
                                    <TextBlock>Duration:</TextBlock>
                                    <TextBox
                                        Text="{Binding DurationFilter, Mode=TwoWay, 
        Converter={x:Static models:TimeSpanTypeConverter.Instance}}" />
                                    <TextBlock>Location:</TextBlock>
                                    <TextBox Text="{Binding LocationFilter, Mode=TwoWay}" />
                                    <TextBlock>Category:</TextBlock>

                                    <AutoCompleteBox ItemsSource="{Binding Suggestions}"
                                                     Text="{Binding CategoryFilter, Mode=TwoWay}" />
                                    <TextBlock>Description:</TextBlock>
                                    <TextBox Text="{Binding DescriptionFilter, Mode=TwoWay}" />
                                    <StackPanel HorizontalAlignment="Center">
                                        <TextBlock>Is done:</TextBlock>
                                        <CheckBox IsChecked="{Binding DoneFilter, Mode=TwoWay}" />
                                    </StackPanel>
                                    <Button Content="Search"
                                            HorizontalAlignment="Stretch"
                                            HorizontalContentAlignment="Center"
                                            Command="{Binding FilterEventSearchButtonCommand}">
                                    </Button>
                                </StackPanel>
                            </StackPanel>
                        </SplitView.Pane>

                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="*" />
                                <RowDefinition Height="Auto" />
                            </Grid.RowDefinitions>

                            <StackPanel Orientation="Horizontal" HorizontalAlignment="Center" Grid.Row="0">
                                <ComboBox x:Name="filterComboBox"
                                          HorizontalAlignment="Stretch"
                                          ItemsSource="{Binding FilterOptions}"
                                          SelectedItem="{Binding SelectedFilter}">
                                </ComboBox>
                            </StackPanel>

                            <DataGrid Margin="20"
                                      ItemsSource="{Binding AllFilteredEvents}"
                                      GridLinesVisibility="All"
                                      BorderThickness="1"
                                      BorderBrush="Black"
                                      SelectedItem="{Binding SelectedEvent}"
                                      Grid.Row="1">
                                <DataGrid.Columns>
                                    <DataGridTextColumn Header="Name" Binding="{Binding Name}" />
                                    <DataGridTextColumn Header="Date" Binding="{Binding DateTime}" />
                                    <DataGridTextColumn Header="Duration" Binding="{Binding Duration}" />
                                    <DataGridTextColumn Header="Location" Binding="{Binding Location}" />
                                    <DataGridTextColumn Header="Description" Binding="{Binding Description}" />
                                    <DataGridTextColumn Header="Category" Binding="{Binding Category}" />
                                    <DataGridCheckBoxColumn Header="Done" Binding="{Binding Done}"></DataGridCheckBoxColumn>
                                </DataGrid.Columns>
                            </DataGrid>

                            <Grid Grid.Row="2">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*" />
                                    <ColumnDefinition Width="*" />
                                </Grid.ColumnDefinitions>
                                <Button Grid.Column="0"
                                        Content="Create event"
                                        HorizontalAlignment="Stretch"
                                        HorizontalContentAlignment="Center"
                                        Command="{Binding OpenCreateEventWindowCommand}" />
                                <Button Grid.Column="1"
                                        Content="Update event"
                                        HorizontalAlignment="Stretch"
                                        HorizontalContentAlignment="Center"
                                        Command="{Binding OpenEditEventWindowCommand}" />
                            </Grid>
                        </Grid>

                    </SplitView>
                </ScrollViewer>
            </TabItem>

            <TabItem Header="Upcoming events">
                <StackPanel>
                    <Button HorizontalAlignment="Stretch"
                            Command="{Binding UpdateUpcomingEventsCommand}">Update</Button>
                    <DataGrid Margin="20"
                              ItemsSource="{Binding UpcomingEvents}"
                              GridLinesVisibility="All"
                              BorderThickness="1"
                              BorderBrush="Black"
                              SelectedItem="{Binding SelectedEvent}"
                              Grid.Row="1">
                        <DataGrid.Columns>
                            <DataGridTextColumn Header="Name" Binding="{Binding Name}" />
                            <DataGridTextColumn Header="Date" Binding="{Binding DateTime}" />
                            <DataGridTextColumn Header="Duration" Binding="{Binding Duration}" />
                            <DataGridTextColumn Header="Location" Binding="{Binding Location}" />
                            <DataGridTextColumn Header="Description" Binding="{Binding Description}" />
                            <DataGridTextColumn Header="Category" Binding="{Binding Category}" />
                            <DataGridCheckBoxColumn Header="Done" Binding="{Binding Done}"/>
                        </DataGrid.Columns>
                    </DataGrid>
                </StackPanel>
            </TabItem>

            <TabItem Header="Past events">
                <StackPanel>
                    <Button HorizontalAlignment="Stretch"
                            Command="{Binding UpdatePastEventsCommand}">Update the list</Button>
                    <Button HorizontalAlignment="Stretch"
                            Command="{Binding OpenEditEventWindowCommand}">Update</Button>
                    <DataGrid Margin="20"
                              ItemsSource="{Binding PastEvents}"
                              GridLinesVisibility="All"
                              BorderThickness="1"
                              BorderBrush="Black"
                              SelectedItem="{Binding SelectedEvent}"
                              Grid.Row="1">
                        <DataGrid.Columns>
                            <DataGridTextColumn Header="Name" Binding="{Binding Name}" />
                            <DataGridTextColumn Header="Date" Binding="{Binding DateTime}" />
                            <DataGridTextColumn Header="Duration" Binding="{Binding Duration}" />
                            <DataGridTextColumn Header="Location" Binding="{Binding Location}" />
                            <DataGridTextColumn Header="Description" Binding="{Binding Description}" />
                            <DataGridTextColumn Header="Category" Binding="{Binding Category}" />
                            <DataGridCheckBoxColumn Header="Done" Binding="{Binding Done}"/>
                        </DataGrid.Columns>
                    </DataGrid>
                </StackPanel>
            </TabItem>

            <TabItem Header="Stats">
                <TextBlock>
                    
1.	Total number of events: Display the total count of all the planned events in the database.
2.	Event distribution by category: Show the distribution of events across different categories. 
This can help users understand the distribution of their activities and prioritize accordingly.
3.	Event distribution by date: Provide a breakdown of events based on dates. 
This can help users identify busy or free days and plan their schedule accordingly.
4.	Event duration statistics: Show statistics related to the duration of events, such as the average duration, the longest event, and the shortest event. 
This can help users understand the time commitment required for different activities.
5.	Overlapping events: Identify any overlapping events and display them as a statistic. 
This can help users avoid scheduling conflicts and ensure efficient use of their time.
6.	Event completion rate: Calculate the percentage of completed events out of the total planned events. 
This can provide users with insights into their productivity and task management.
7.	Event frequency: Show the frequency of events over a specific time period, such as daily, weekly, or monthly. 
This can help users identify patterns in their activities.
                </TextBlock>
            </TabItem>
        </TabControl>

    </DockPanel>
</Window>
